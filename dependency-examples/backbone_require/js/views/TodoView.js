// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "wijrating", "underscore", "backbone", "text!../../templates/todos.html", "common"], function($, wijrating, _, Backbone, todosTemplate, Common) {
    var TodoView;
    return TodoView = (function(_super) {

      __extends(TodoView, _super);

      function TodoView() {
        this.close = __bind(this.close, this);

        this.edit = __bind(this.edit, this);

        this.toggleVisible = __bind(this.toggleVisible, this);

        this.render = __bind(this.render, this);
        console.log("new TodoView");
        TodoView.__super__.constructor.apply(this, arguments);
      }

      TodoView.prototype.tagName = "li";

      TodoView.prototype.template = _.template(todosTemplate);

      TodoView.prototype.events = {
        "click .toggle": "togglecompleted",
        "dblclick label": "edit",
        "click .destroy": "clear",
        "keypress .edit": "updateOnEnter",
        "blur .edit": "close",
        "wijratingrated .rating": "rated"
      };

      TodoView.prototype.initialize = function() {
        this.model.on("change", this.render);
        this.model.on("destroy", this.remove, this);
        return this.model.on("visible", this.toggleVisible);
      };

      TodoView.prototype.render = function() {
        console.log("TodoView.render:" + this.model.get("id"));
        this.$el.html(this.template(this.model.toJSON()));
        this.$el.toggleClass("completed", this.model.get("completed"));
        this.toggleVisible();
        this.$('.rating').wijrating({
          value: this.model.get("rating")
        });
        this.input = this.$(".edit");
        return this;
      };

      TodoView.prototype.toggleVisible = function() {
        return this.$el.toggleClass("hidden", !this.isVisible());
      };

      TodoView.prototype.isVisible = function() {
        var isCompleted;
        isCompleted = this.model.get("completed");
        return Common.TodoFilter === "" || (isCompleted && Common.TodoFilter === "completed") || (!isCompleted && Common.TodoFilter === "active");
      };

      TodoView.prototype.togglecompleted = function() {
        return this.model.toggle();
      };

      TodoView.prototype.rated = function(e, args) {
        return this.model.save({
          rating: args.value
        });
      };

      TodoView.prototype.edit = function() {
        this.$el.addClass("editing");
        return this.input.focus();
      };

      TodoView.prototype.close = function() {
        var value;
        value = this.input.val().trim();
        if (value) {
          this.model.save({
            title: value
          });
        } else {
          this.clear();
        }
        return this.$el.removeClass("editing");
      };

      TodoView.prototype.updateOnEnter = function(e) {
        if (e.keyCode === Common.ENTER_KEY) {
          return this.close();
        }
      };

      TodoView.prototype.clear = function() {
        return this.model.destroy();
      };

      return TodoView;

    })(Backbone.View);
  });

}).call(this);
