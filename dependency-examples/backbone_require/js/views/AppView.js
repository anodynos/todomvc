// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["jquery", "underscore", "backbone", "collections/TodosCollection", "views/TodoView", "text!../../templates/stats.html", "common"], function($, _, Backbone, Todos, TodoView, statsTemplate, Common) {
    var AppView;
    return AppView = (function(_super) {

      __extends(AppView, _super);

      function AppView() {
        this.filterAll = __bind(this.filterAll, this);

        this.addAll = __bind(this.addAll, this);

        this.addOne = __bind(this.addOne, this);

        this.render = __bind(this.render, this);
        console.log("new AppView");
        AppView.__super__.constructor.apply(this, arguments);
      }

      AppView.prototype.el = "#todoapp";

      AppView.prototype.template = _.template(statsTemplate);

      AppView.prototype.events = {
        "keypress #new-todo": "createOnEnter",
        "click #clear-completed": "clearCompleted",
        "click #toggle-all": "toggleAllComplete"
      };

      AppView.prototype.initialize = function() {
        this.input = this.$("#new-todo");
        this.allCheckbox = this.$("#toggle-all")[0];
        this.$footer = this.$("#footer");
        this.$main = this.$("#main");
        this.todoViewsCache = {};
        Todos.on("add", this.addOne);
        Todos.on("reset", this.addAll);
        Todos.on("change:completed", this.filterOne);
        Todos.on("filter", this.filterAll);
        Todos.on("all", this.render);
        return Todos.fetch();
      };

      AppView.prototype.render = function() {
        var completedCount, remainingCount;
        completedCount = Todos.completed().length;
        remainingCount = Todos.remaining().length;
        if (Todos.length) {
          this.$main.show();
          this.$footer.show();
          this.$footer.html(this.template({
            completed: completedCount,
            remaining: remainingCount
          }));
          this.$("#filters li a").removeClass("selected").filter("[href=\"#/" + (Common.TodoFilter || "") + "\"]").addClass("selected");
        } else {
          this.$main.hide();
          this.$footer.hide();
        }
        return this.allCheckbox.checked = !remainingCount;
      };

      AppView.prototype.addOne = function(todo) {
        var view;
        view = new TodoView({
          model: todo
        });
        return $("#todo-list").append(view.render().el);
      };

      AppView.prototype.addAll = function() {
        console.log("addAll");
        this.$("#todo-list").html("");
        return Todos.each(this.addOne, this);
      };

      AppView.prototype.filterOne = function(todo) {
        return todo.trigger("visible");
      };

      AppView.prototype.filterAll = function() {
        return Todos.each(this.filterOne, this);
      };

      AppView.prototype.newAttributes = function() {
        return {
          title: this.input.val().trim(),
          order: Todos.nextOrder(),
          completed: false,
          rating: 0
        };
      };

      AppView.prototype.createOnEnter = function(e) {
        if (e.which !== Common.ENTER_KEY || !this.input.val().trim()) {
          return;
        }
        Todos.create(this.newAttributes());
        return this.input.val("");
      };

      AppView.prototype.clearCompleted = function() {
        _.each(Todos.completed(), function(todo) {
          return todo.destroy();
        });
        return false;
      };

      AppView.prototype.toggleAllComplete = function() {
        var completed;
        completed = this.allCheckbox.checked;
        return Todos.each(function(todo) {
          return todo.save({
            completed: completed
          });
        });
      };

      return AppView;

    })(Backbone.View);
  });

}).call(this);
