// Generated by CoffeeScript 1.3.3
(function() {

  (function() {
    "use strict";

    var ENTER_KEY, Todo, ViewModel, todos, viewModel;
    ENTER_KEY = 13;
    ko.bindingHandlers.enterKey = {
      init: function(element, valueAccessor, allBindingsAccessor, data) {
        var newValueAccessor, wrappedHandler;
        wrappedHandler = function(data, event) {
          if (event.keyCode === ENTER_KEY) {
            valueAccessor().call(this, data, event);
          }
          return null;
        };
        newValueAccessor = function() {
          return {
            keyup: wrappedHandler
          };
        };
        ko.bindingHandlers.event.init(element, newValueAccessor, allBindingsAccessor, data);
        return null;
      }
    };
    ko.bindingHandlers.selectAndFocus = {
      init: function(element, valueAccessor, allBindingsAccessor) {
        ko.bindingHandlers.hasfocus.init(element, valueAccessor, allBindingsAccessor);
        ko.utils.registerEventHandler(element, "focus", function() {
          element.focus();
          return null;
        });
        return null;
      },
      update: function(element, valueAccessor) {
        ko.utils.unwrapObservable(valueAccessor());
        return setTimeout((function() {
          return ko.bindingHandlers.hasfocus.update(element, valueAccessor);
        }), 0);
      }
    };
    Todo = function(title, completed) {
      this.title = ko.observable(title);
      this.completed = ko.observable(completed);
      this.editing = ko.observable(false);
      return null;
    };
    ViewModel = function(todos) {
      var self;
      self = this;
      self.todos = ko.observableArray(ko.utils.arrayMap(todos, function(todo) {
        return new Todo(todo.title, todo.completed);
      }));
      self.current = ko.observable();
      self.showMode = ko.observable("all");
      self.filteredTodos = ko.computed(function() {
        switch (self.showMode()) {
          case "active":
            return self.todos().filter(function(todo) {
              return !todo.completed();
            });
          case "completed":
            return self.todos().filter(function(todo) {
              return todo.completed();
            });
          default:
            return self.todos();
        }
      });
      self.add = function() {
        var current;
        current = self.current().trim();
        if (current) {
          self.todos.push(new Todo(current));
          return self.current("");
        }
      };
      self.remove = function(todo) {
        return self.todos.remove(todo);
      };
      self.removeCompleted = function() {
        return self.todos.remove(function(todo) {
          return todo.completed();
        });
      };
      self.editItem = function(item) {
        return item.editing(true);
      };
      self.stopEditing = function(item) {
        item.editing(false);
        if (!item.title().trim()) {
          return self.remove(item);
        }
      };
      self.completedCount = ko.computed(function() {
        return ko.utils.arrayFilter(self.todos(), function(todo) {
          return todo.completed();
        }).length;
      });
      self.remainingCount = ko.computed(function() {
        return self.todos().length - self.completedCount();
      });
      self.allCompleted = ko.computed({
        read: function() {
          return !self.remainingCount();
        },
        write: function(newValue) {
          return ko.utils.arrayForEach(self.todos(), function(todo) {
            return todo.completed(newValue);
          });
        }
      });
      self.getLabel = function(count) {
        if (ko.utils.unwrapObservable(count) === 1) {
          return "item";
        } else {
          return "items";
        }
      };
      ko.computed(function() {
        return localStorage.setItem("todos-knockout", ko.toJSON(self.todos));
      }).extend({
        throttle: 500
      });
      return null;
    };
    todos = ko.utils.parseJson(localStorage.getItem("todos-knockout"));
    viewModel = new ViewModel(todos || []);
    ko.applyBindings(viewModel);
    crossroads.addRoute("all", function() {
      return viewModel.showMode("all");
    });
    crossroads.addRoute("active", function() {
      return viewModel.showMode("active");
    });
    crossroads.addRoute("completed", function() {
      return viewModel.showMode("completed");
    });
    window.onhashchange = function() {
      return crossroads.parse(location.hash.replace("#", ""));
    };
    return crossroads.parse(location.hash.replace("#", ""));
  })();

}).call(this);
